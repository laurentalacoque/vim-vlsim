*vlsi.txt* Useful scripts for VLSI design                 ~
                               _                          ~
                        __   _| |___(_)_ __ __            ~
                        \ \ / / / __| | '_ ` _ \          ~
                         \ V /| \__ \ | | | | | |         ~
                          \_/ |_|___/_|_| |_| |_|         ~

Authors: Laurent Alacoque, Yvain Thonnart                                      ~
Version: 0.3                                                                   ~
Date:    Oct 18, 2023                                                          ~
                                                                *vlsi-copyright*
Copyright: (c) 2009 - 2023 by the authors                                      ~
           The VIM LICENSE applies to VLSI plugin~
           (see |copyright|) except use vlsi instead of "Vim".~
           NO WARRANTY, EXPRESS OR IMPLIED.  USE AT-YOUR-OWN-RISK.~

==============================================================================
0. Contents                                                           *vlsi-toc*

        1. VLSI module yank & paste                            |vlsi-yank-paste|
        1.1 Commands                                  |vlsi-yank-paste-commands|
        1.2 SystemVerilog Interfaces                 |vlsi-yank-paste-interface|
        1.3 Mappings                                  |vlsi-yank-paste-mappings|
        2. VLSI Tagbar plugin integration                   |vlsi-tagbar-plugin|
        3. Hacking VLSIM                                          |vlsi-hacking|
        3.1 Plugin overview
        3.2 VLSIM global variables                      |vlsim-global-variables|
        3.3 Generic Formatting tools                  |vlsim-generic-formatters|
        4. Changelog                                            |vlsi-changelog|

==============================================================================
1. VLSI module yank & paste                                    *vlsi-yank-paste*

The VLSI plugin defines module yank & paste, keeping a list of registered
modules in memory.

Each module is defined by:
    - its name
    - a set of generic parameters with their types and default value
    - a set of input and output ports, with their direction and range

Plugin architecture is modular with respect to filetype.
Paste is possible from a filetype to another.

Current supported filetypes:
    - Verilog
    - VHDL
    - SystemVerilog

Summary:
|:VlsiYank|                             Yank the module containing the cursor
                                      default mapping: <F6>, <leader-y>

|:VlsiYankAll|                          Yank all modules/entities/interfaces
                                      in current buffer or files in argument
                                      default mapping: <C-M-F6>, <leader-yy>

|:VlsiList|                             Display the available module list
                                      default mapping: not mapped

|:VlsiListInterfaces|        Display the available systemverilog interfaces list
                                      default mapping: not mapped

|:VlsiDefineNew|                        Interactively capture a new module
                                      default mapping: <M-S-F6>

|:VlsiPasteAsDefinition| [{modulename}] Paste module definition
                                      default mapping: <S-F6>, <leader-pe>,
                                                       <leader-pm>

|:VlsiPasteAsInterface| [{modulename}]  Paste module interface
                                      default mapping: <C-F6>, <leader-pc>

|:VlsiPasteAsInstance| [{modulename} [{suffix} [{prefix}]]]
                                        Paste module as bound instance
                                      default mapping: <M-F6>, <leader-pi>

|:VlsiPasteSignals| [{modulename}] [{suffix} [{prefix}]]
                                        Paste module IOs as signals
                                      default mapping: <leader-ps>

------------------------------------------------------------------------------
1.2 Commands                                          *vlsi-yank-paste-commands*

                                                                     *:VlsiYank*
If you already have a module description with information on generic
parameters and ports, you can yank the module to the available module list
using the following command with the cursor within the module description:

    :VlsiYank

This command will identify the surrounding module, and parse the required
information (name, generic parameters, ports), retaining it in the available
module list.
|:VlsiYank:| also captures systemverilog interfaces.
|:VlsiYank| remembers the last entity captured, so any :VlsiPaste* used
without argument will paste it.

                                                                  *:VlsiYankAll*
VlsiYankAll performs a |:VlsiYank| on all modules/entities of the current buffer
or a list of files.

    :VlsiYankAll [{file},[{file},...]]

Note: :VlsiYankAll won't affect the last entity captured. Using VlsiPaste*
without argument will still paste the last entity captured with |:VlsiYank|

                                                                     *:VlsiList*
To see the available module list, use the following command:

    :VlsiList

This command will show all available module names on the cmdline, separated by
spaces.
Note that this command is actually internally called by all paste commands to
provide a completion list before paste. You do not need to list the modules
before starting module paste.
                                                           *:VlsiListInterfaces*
To see the available systemverilog interfaces list, use the following command:

    :VlsiListInterfaces

This command will show all available interfaces names on the cmdline, separated 
by spaces.
                                                                *:VlsiDefineNew*
To capture a new module interactively, use the following command:

    :VlsiDefineNew

You will be prompted first the name of the new module, then its generic
parameters and ports.
Once the capture terminated, the resulting module description is added to the
available module list.
The capture can be interrupted before the end by hitting <Ctrl-C>.

                                                        *:VlsiPasteAsDefinition*
To paste a module definition from the available list, use the following
command:

    :VlsiPasteAsDefinition [{modulename}]

In VHDL, this gives the module 'entity', with its 'generic' and 'port' fields.
In Verilog, this gives the module 'module', with its 'parameter', 'input' and
'output' fields.
If provided, {modulename} will be used to lookup the available module list,
and paste its corresponding module description. if no {modulename} is
provided, you will be prompted first the name of the module, with possible
completion using the <Tab> key.

                                                         *:VlsiPasteAsInterface*
To paste a module interface from the available list, use the following command:

    :VlsiPasteAsInterface [{modulename}]

In VHDL, this gives the module 'component', with its 'generic' and 'port'
fields.
This command returns nothing in Verilog.
If provided, {modulename} will be used to lookup the available module list,
and paste its corresponding module description. if no {modulename} is
provided, you will be prompted first the name of the module, with possible
completion using the <Tab> key.

                                                          *:VlsiPasteAsInstance*
To paste a module from the available list as a bound instance, use the
following command:

    :VlsiPasteAsInstance [{modulename} [{suffix} [{prefix}]]

If provided, {modulename} will be used to lookup the available module list,
and paste its corresponding module description. if no {modulename} is
provided, you will be prompted first the name of the module, with possible
completion using the <Tab> key.

In VHDL, this gives a module instance, with its 'generic map' and
'port map' fields.
In Verilog, this gives a module instance, with its '#()' parameter map and
'() port map fields bound by name.
The generic parameter map will be done with the default values provided during
module capture. It is up to you to change those values.

Similarly, by default, the port map will straightforwardly bind all formal 
ports to actual signals of the same name. 
You may change those or add prefixes/suffixes afterwards, or alternatively use
the {suffix} or {prefix} optionnal arguments:

Example without prefix nor suffix >
               :VlsiPasteAsInstance mymodule

               mymodule u_mymodule (
                .clk (clk),
                .rst (rst)
               );
<
Example with suffix >
               :VlsiPasteAsInstance mymodule _north

               mymodule u_mymodule_north (
                .clk (clk_north),
                .rst (rst_north)
               );
<
Example with prefix only >
               :VlsiPasteAsInstance mymodule '' north_

               mymodule u_north_mymodule (
                .clk (north_clk),
                .rst (north_rst)
               );
<

                                                             *:VlsiPasteSignals*
VlsiPasteSignals provides a convenient way to rapidly create signals for
instances interconnections.
Imagine you just pasted an instance for module 'mymodule' with suffix
'_north' using |:VlsiPasteAsInstance|. You can create matching interconnection
signals using the command:

    :VlsiPasteSignals [{modulename} [{suffix} [{prefix}]]

where {modulename} is a |:VlsiYank|ed module. Optionnal {suffix} and {prefix} 
will be respectively pospended and prepended to each signal name. 

Here's an example: >
               :VlsiPasteSignals mymodule _i0

               // interface signals for u_mymodule_i0
               logic clk_i0;
               logic rst_i0;
               // end of signals for u_mymodule_i0
<
------------------------------------------------------------------------------
1. SystemVerilog Interfaces                          *vlsi-yank-paste-interface*

SystemVerilog Interfaces are structures that contain a bundle of signals. This
is useful to map complete bus systems into single ports.

VLSIM understands Interfaces, you just need to |:VlsiYank| them.

When pasting modules that contain ports of type 'interface' (such as
AHB_BUS.master for example) into languages that don't understand them, the
interfaces are automatically expanded

------------------------------------------------------------------------------
1.3 Mappings                                          *vlsi-yank-paste-mappings*

normal mode <Plug> Mappings are defined to the yank and paste commands,
so you can define your own mappings:

    <Plug>VlsiList
    <Plug>VlsiListInterfaces
    <Plug>VlsiDefineNew
    <Plug>VlsiYank
    <Plug>VlsiYankAll
    <Plug>VlsiPasteAsDefinition
    <Plug>VlsiPasteAsInterface
    <Plug>VlsiPasteAsInstance
    <Plug>VlsiPasteSignals

To use a specific key or key combination in normal mode to trigger one of
these commands, put a line like this one in your .vimrc file.

    nmap <M-F6>  <Plug>VlsiYank

For more information on using <Plug> mappings, refer to |using-<Plug>|.

If not conflicting with your own mapping definitions, the following default
mappings are set for a recognized filetype:

    nmap <M-F6>     <Plug>VlsiYank
    nmap <C-M-F6>   <Plug>VlsiYankAll
    nmap <M-S-F6>   <Plug>VlsiDefineNew
    nmap <S-F6>     <Plug>VlsiPasteAsDefinition
    nmap <C-F6>     <Plug>VlsiPasteAsInterface
    nmap <F6>       <Plug>VlsiPasteAsInstance

Note: <M-> means the Alt key,
      <C-> means the Control key,
      <S-> means the Shift key.

------------------------------------------------------------------------------
                                                            *vlsi-customization*
Specific filetype plugins for vlsi may define their own customization
variables.

                                                         *g:vlsi_vhdl_uppercase*
If you want the VHDL keywords to be printed as uppercase, define this variable
in your .vimrc:

let g:vlsi_vhdl_uppercase = 1

==============================================================================
2. VLSI Tagbar plugin integration                           *vlsi-tagbar-plugin*

The VLSI plugin adds support for ctags-compatible tag file generation and
corresponding configuration for the Tagbar plugin. for more information, see:

Tagbar: a class outline viewer for Vim
<https://github.com/majutsushi/tagbar>

and once installed, the corresponding plugin documentation in vim: |tagbar|

Scoped tag generation is available for VHDL and Verilog.

==============================================================================
3. Hacking VLSIM                                                  *vlsi-hacking*

3.1 Plugin overview

>
    ├── autoload
    │   ├── vlsi
    │   │   ├── vhdl.vim             vhdl specific commands
    │   │   └── v_sv.vim             verilog/systemverilog specific commands
    │   └── vlsi.vim                 main entry point, generic commands
    ├── bin
    │   └── ctags
    │       ├── systemverilog.pl     tags generation for tagbar
    │       └── vhdl.pl              tags generation for vhdl
    ├── ftplugin
    │   ├── systemverilog
    │   │   └── vlsi.vim             configuration for systemverilog buffers
    │   ├── verilog
    │   │   └── vlsi.vim             configuration for verilog buffers
    │   └── vhdl
    │       └── vlsi.vim             configuration for vhdl buffers
    └── README.md
<

VLSIM consists of two main features:
- Yank/Paste feature for cross-languages yank and paste of modules
- |tagbar| plugin integration for easy source browsing

Yank/Paste feature~
Yank/Paste feature relies on the generic global variable `g:modules`

- each language is responsible to define a `vlsi#lang#VlsiYank` function that
  parses the entity that encloses the cursor and populates the `g:modules`
  global variable

- Conversely, each language is also responsible for transforming the generic
  module definitition in `g:modules` into language specific textual
  descriptions:  definitions, instances or signals.
  This can be achieved by dedicated functions or using built-in generic
  methods

Tagbar integration~

- |tagbar| normally relies on ctags/universal-ctags for tag generation but has
  limited support for VLSI languages. For better integration (e.g. instances,
  ...) VLSIM provides ctags-like programs `in bin/ctags/*.pl`

  To support a new language, a parser should be written and added to this
  directory and a mapping of kinds / groups should be added to the directory
  `ftplugin/<language>/vlsi.vim`. Use existing examples as models

  Note: When tagbar doesn't seem to get what you meant, it is often usefull to
  take a look at your ctag parser output!

--------------------------------------------------------------------------------

3.2 VLSIM global variables                              *vlsim-global-variables*

Apart from the  |g:vlsi_vhdl_uppercase| configuration variable described
above, Global variables are |g:modules| and systemverilog's |g:interfaces| in a
generic form. They are populated by |:VlsiYank|/|:VlsiYankAll| implementations and 
used by the :VlsiPaste* commands.

                                                     *g:Vlsi_last_yanked_entity*

The last captured entity or module is stored into the variable
g:Vlsi_last_yanked_entity. This variable is only altered by successful
completion of |:VlsiYank| (and not |:VlsiYankAll|)

                                                                     *g:modules*
3.2.1 g:modules variable

The `g:modules` global variable is a dictionnary containing all modules that 
were successfully analyzed with the |:VlsiYank| command.
It has the following structure: >
        g:modules = {
            'module1' : {module1 def...},
            'module2' : {module2 def...},
            ...
        }
<
For each module, the module definition has the following structure: >
        g:modules['module1'] = #{
            lang: 'vhdl', "file type of the original module yanked
            file: 'rtl/src/file.vhd',
            generics: [ {gen1 def},
                        {gen2 def},
                        ...
                      ],
            ports:    [ {port1 def},
                        {port2 def},
                        ...
                      ]
            }
The modules properties 'file' and 'lang' are set to the filename and filetype
of the buffer from which the module was yanked

                                                            *g:modules-generics*
The generics definition has the following structure: >
    g:modules['module1'].generics[0] = #{
        name:'param1_name', type:'natural', value:'4' }
<
                                                               *g:modules-ports*
The port definition has the following structure: >
    g:modules['module1'].ports[0] = #{
        name:'port1', type:'logic', range:'31{{:}}0', dir:'i' }
<

Where 'range' can be `0` or `'start{{:}}end'`
and 'dir' can be any of `'i'`, `'o'` or `'io'`

--------------------------------------------------------------------------------
                                                                  *g:interfaces*
3.2.2 g:interfaces variable

The `g:interfaces` variable is used to store systemverilog interfaces.
interfaces can be seen as bundle of ports. Each interface can contain a
variety of 'modports' that specialize the interface generic ports.
For example an interface can contain a 'bus' generic signal with two
'modports' : 'master' for which the 'bus' is output and 'slave' for which the
'bus' is input.
`g:interfaces` are captured in the systemverilog implementation of |:VlsiYank|

                                                         *g:interfaces-generics*
                                                            *g:interfaces-ports*

`g:interfaces` follows the same structure as |g:modules|, each interface in
g:interfaces[*] contains 'lang', 'generics' and 'ports' like |g:modules|
    see |g:modules-ports|, |g:modules-generics|

                                                         *g:interfaces-modports*
Additionnally interface definitions adds 'modports' dictionnary to the
structure. Each 'modport' contains a list of fully qualified ports (see
|g:modules-ports|).
>
    " each interface contains ports with dir 'io'
    g:interfaces['AHB'].ports = [
        {'name':'req', dir:'io', ...},
        {'name':'bus', dir:'io', ...}
    ]

    " ... that can be specialized in modports 
    g:interfaces['AHB'].modports = #{
        master: [ {'name':'req', dir:'o', ...}
                  {'name':'bus', dir:'i', ...}
                ],
        slave:  [ {'name':'req', dir:'i', ...}
                  {'name':'bus', dir:'o', ...}
                ],
                ...
    }
<
3.2.3 g:Vlsi-last-yanked-entity

if it exists, this variable contains the name of the last entity/module yanked

------------------------------------------------------------------------------

3.3 Generic Formatting tools                          *vlsim-generic-formatters*

`autoload/vlsi.vim` contains generic functions to facilitate the writing of a
formatter for VlsiPaste* commands.

Note: Due to the way vim treats newlines, the special char "\x01" should be
used whenever one wants to insert a newline. "\n" simply doesn't work.

------------------------------------------------------------------------------

3.3.1 basicFormatter                                        *vlsi#basicFormat()*

The function vlsi#basicFormat(item, format) is useful for basic formatting of
dictionnaries.

vlsi#basicFormat({item}, {format})
    {item} is a dictionnary with key:value format such as those found in
      |g:modules-ports| or |g:modules-generics|
    {formatt} is either:
    - a function('myfunction') in which case the function will be called with
      {item} as argument and should return a string or
    - a string with optionnal keys enclosed in braces. They will be
      substituted
      Example : >
        vlsi#basicFormatter({'name':'mymodule', 'size':9}, "module:
        {name}, size:({size})")
<     Will return >
        "module: mymodule, size: 9"
<

------------------------------------------------------------------------------

3.3.2 vlsi#GenericPaste                                    *vlsi#GenericPaste()*

vlsi#GenericPaste( {patterns}, {moduleName}, {suffix}='', {prefix}=''

Paste module {moduleName} using patterns defined in {patterns}
patterns should look like this dict, where each line is either
a string (all '{key}' will be replaced by the corresponding item[key] value,
see |vlsi#basicFormat|) or a function that will get item and should return a
string.
NOTE: "\x01" char will be replaced by newlines
Example {patterns} for verilog module: >
    #{
       \ start_module          : "module {module_name}",

           \ start_generics        : " #(\x01",
              \ generics_item_func    : "    parameter {name} = {value}",
              \ generics_sep          : ",\x01",
           \ end_generics          : "\x01    )",

           \ start_ports           : " (\x01",
              \ port_list_func        : function('s:moduleIOFormatter'),
              \ port_list_sep         : ",\x01",
           \ end_ports             : "\x01);\x01",
       \ end_module            : "\x01endmodule //{module_name}\x01",
   \ }
<
the (start|end)_* formatters are called with following item : >
    #{module_name: 'module name', prefix:'...', suffix:'...'}
<
the 'generics_item_func' formatter will be called with 
    `g:modules.moduleName.generics`  items (see |g:modules-items|)

the 'port_list_func' formatter will be called with 
    `g:modules.moduleName.ports` with some enhancements

==============================================================================
4. Changelog                                                    *vlsi-changelog*

    0.3: Oct 18, 2023:  Deep rewrite, New Generic Paste mechanism,
                        systemverilog support
    0.2: Jul 21, 2017:  Wrapped in standalone vim plugin
    0.1: Oct 22, 2009:  First working version

==============================================================================
vim:tw=78:ts=8:ft=help
